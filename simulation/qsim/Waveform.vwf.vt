// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/02/2018 17:32:30"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FSM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FSM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg c_s;
reg clk;
reg g_end;
reg r_end;
reg rst;
reg set_mode;
reg y_end;
// wires                                               
wire [2:0] A;
wire [2:0] B;
wire fsm_g;
wire fsm_r;
wire fsm_y;

// assign statements (if any)                          
FSM i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.c_s(c_s),
	.clk(clk),
	.fsm_g(fsm_g),
	.fsm_r(fsm_r),
	.fsm_y(fsm_y),
	.g_end(g_end),
	.r_end(r_end),
	.rst(rst),
	.set_mode(set_mode),
	.y_end(y_end)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #10000 1'b1;
	rst = #60000 1'b0;
end 

// c_s
initial
begin
	c_s = 1'b0;
	c_s = #650000 1'b1;
	c_s = #20000 1'b0;
	c_s = #110000 1'b1;
	c_s = #20000 1'b0;
end 

// set_mode
initial
begin
	set_mode = 1'b0;
end 

// g_end
initial
begin
	g_end = 1'b0;
	g_end = #210000 1'b1;
	g_end = #20000 1'b0;
end 

// r_end
initial
begin
	r_end = 1'b0;
	r_end = #100000 1'b1;
	r_end = #20000 1'b0;
end 

// y_end
initial
begin
	y_end = 1'b0;
	y_end = #400000 1'b1;
	y_end = #20000 1'b0;
end 
endmodule

